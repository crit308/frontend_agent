// Corresponds to ai_tutor/agents/models.py
// import { UserModelState } from "@/store/sessionStore"; // Import UserModelState if defined there or define below -- REMOVED THIS LINE

// Or import from a UUID library if you use one
import { UUID } from "crypto";

export interface LearningObjective {
  title: string;
  description: string;
  priority: number;
}

export interface LessonSection {
  title: string;
  objectives: LearningObjective[];
  estimated_duration_minutes: number;
  concepts_to_cover: string[];
}

export interface LessonPlan {
  title: string;
  description: string;
  target_audience: string;
  prerequisites: string[];
  sections: LessonSection[];
  total_estimated_duration_minutes: number;
  additional_resources?: string[];
}

// --- Lesson Content ---

export interface QuizQuestion {
  question: string;
  options: string[];
  correct_answer_index: number;
  explanation: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  related_section: string;
}

// --- REMOVE or COMMENT OUT these interfaces ---
/*
export interface ExplanationContent {
  topic: string;
  explanation: string;
  examples: string[];
  mini_quiz?: QuizQuestion[]; // Optional mini-quiz embedded
}

export interface Exercise {
  question: string;
  difficulty_level: 'Easy' | 'Medium' | 'Hard';
  answer: string; // Consider if the answer should be sent to the frontend initially
  explanation: string;
}

export interface SectionContent {
  title: string;
  introduction: string;
  explanations: ExplanationContent[];
  exercises: Exercise[];
  summary: string;
}

export interface MiniQuizInfo {
  related_section_title: string;
  related_topic: string;
  quiz_question: QuizQuestion;
}

export interface UserSummaryPromptInfo {
  section_title: string;
  topic: string;
}
*/
// --- End interfaces to remove/comment ---

// +++ Whiteboard Types (Moved Here) +++
// Based on Fabric.js properties needed for factory
export interface CanvasObjectSpec {
  id: string; // Unique ID generated by BE (e.g., "text-1", "rect-0")
  kind: 'rect' | 'circle' | 'textbox' | 'line' | 'path' | 'polygon' | string; // Common types + allow custom
  x: number;
  y: number;
  fill?: string;
  stroke?: string;
  strokeWidth?: number;
  width?: number;
  height?: number;
  radius?: number; // For circle
  text?: string; // For textbox
  fontSize?: number; // For textbox
  fontFamily?: string; // For textbox
  points?: number[] | {x: number, y: number}[]; // For line, path, polygon
  angle?: number;
  selectable?: boolean;
  evented?: boolean; // Typically false for AI drawings?
  metadata?: { // Add metadata field
    source: 'assistant' | 'user';
  };
  // Add other common Fabric properties as needed
}

export type WhiteboardAction =
  | { type: "ADD_OBJECTS"; objects: CanvasObjectSpec[] }
  | { type: "UPDATE_OBJECTS"; objects: Partial<CanvasObjectSpec>[] } // Use Partial for updates
  | { type: "DELETE_OBJECTS"; ids: string[] };
// --- End Whiteboard Types ---

// --- MODIFIED LessonContent Interface ---
export interface LessonContent {
  title: string;
  text: string;
  // Remove: introduction, sections, conclusion, next_steps, mini_quizzes, user_summary_prompts
  suggested_approach?: string;
}

// --- Quiz & Feedback ---

export interface Quiz {
  title: string;
  description: string;
  lesson_title: string;
  questions: QuizQuestion[];
  passing_score: number;
  total_points: number;
  estimated_completion_time_minutes: number;
}

export interface QuizUserAnswer {
  question_index: number;
  selected_option_index: number;
  time_taken_seconds?: number; // Optional based on requirements
}

export interface QuizUserAnswers {
  quiz_title: string;
  user_answers: QuizUserAnswer[];
  total_time_taken_seconds?: number; // Optional
}

export interface QuizFeedbackItem {
  question_index: number;
  question_text: string;
  user_selected_option: string;
  is_correct: boolean;
  correct_option: string;
  explanation: string;
  improvement_suggestion?: string;
}

export interface QuizFeedback {
  quiz_title: string;
  total_questions: number;
  correct_answers: number;
  score_percentage: number;
  passed: boolean;
  total_time_taken_seconds?: number;
  feedback_items: QuizFeedbackItem[];
  overall_feedback: string;
  suggested_study_topics: string[];
  next_steps: string[];
}

// --- Session & Analysis ---

export interface LearningInsight {
  topic: string;
  observation: string;
  strength: boolean;
  recommendation: string;
}

export interface TeachingInsight {
  approach: string;
  effectiveness: string;
  evidence: string;
  suggestion: string;
}

export interface SessionAnalysis {
  session_id: string;
  session_duration_seconds: number;
  overall_effectiveness: number; // Assuming 0-100 scale as in backend
  strengths: string[];
  improvement_areas: string[];
  lesson_plan_quality: number;
  lesson_plan_insights: string[];
  content_quality: number;
  content_insights: string[];
  quiz_quality: number;
  quiz_insights: string[];
  student_performance: number;
  learning_insights: LearningInsight[];
  teaching_effectiveness: number;
  teaching_insights: TeachingInsight[];
  recommendations: string[];
  recommended_adjustments: string[];
  suggested_resources: string[];
}

// API Response Types (adjust as needed based on your actual API)
export interface StartSessionResponse {
  session_id: string; // Keep as string for easier handling, backend uses UUID
  message: string;
}

export interface UploadDocumentsResponse {
  vector_store_id?: string | null; // Make optional as it might come from session context
  files_received: string[];
  analysis_status: string;
  message: string;
}

// --- Folder Types ---
export interface FolderCreateRequest {
    name: string;
}

export interface FolderResponse {
    id: string; // Keep as string for easier frontend handling
    name: string;
    created_at: string; // ISO 8601 timestamp string
}

// Generic types for API state
export type LoadingState = 'idle' | 'loading' | 'interacting' | 'success' | 'error';

// --- Added AnalysisResult type if needed from backend ---
export interface AnalysisResult {
    analysis_text: string;
    key_concepts: string[];
    key_terms: Record<string, string>;
    file_names: string[];
    vector_store_id: string;
}

// --- Added User Model State Types (can move to separate file or keep here) ---
// Duplicating definition slightly from store for clarity in API types
export type UserInteractionOutcome = 'correct' | 'incorrect' | 'struggled' | 'summarized_well' | 'asked_question' | 'mastered';
export type UserConceptMastery = { mastery_level: number; interaction_count: number; last_outcome: UserInteractionOutcome | null; };

// Define UserModelState here if not importing from store
export interface UserModelState {
    concepts: Record<string, UserConceptMastery>;
    overall_progress: number;
    current_topic: string | null;
    session_summary: string;
}

// +++ Interaction Types +++
export interface InteractionRequestData {
    type: 'start' | 'next' | 'answer' | 'question' | 'summary' | 'previous'; // Define interaction types
    data?: Record<string, any>; // e.g., { answer_index: 1 } or { question_text: "..." }
}

// --- Orchestrator response models ---
export interface ExplanationResponse {
  response_type: 'explanation';
  text: string;
  topic: string;
  segment_index: number;
  is_last_segment: boolean;
  references?: string[];
}
export interface QuestionResponse {
  response_type: 'question';
  question: QuizQuestion;
  topic: string;
  context?: string;
}
export interface FeedbackResponse {
  response_type: 'feedback';
  feedback: QuizFeedbackItem;
  topic: string;
  correct_answer?: string;
  explanation?: string;
}
export interface MessageResponse {
  response_type: 'message';
  text: string;
  message_type?: string;
}
export interface ErrorResponse {
  response_type: 'error';
  message: string;
  error_code?: string;
  details?: Record<string, any>;
}
export type TutorInteractionResponse =
  | ExplanationResponse
  | QuestionResponse
  | FeedbackResponse
  | MessageResponse
  | ErrorResponse;

// Updated InteractionResponseData to include optional whiteboard actions
export interface InteractionResponseData {
  content_type: string; // e.g. 'explanation', 'question', etc
  data: TutorInteractionResponse;  // the actual payload
  user_model_state: UserModelState;
  whiteboard_actions?: WhiteboardAction[]; // Add the optional field
  // status?: string; // Keep if still used (Assuming removed based on task)
}

export interface FocusObjective {
  topic: string;
  learning_goal: string;
  priority: number;
  relevant_concepts: string[];
  suggested_approach?: string;
}